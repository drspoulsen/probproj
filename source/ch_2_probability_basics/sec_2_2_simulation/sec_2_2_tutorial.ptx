<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec_2_2_tutorial" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Sage Tutorial</title>
<p>
 A general outline of the simulation process is as follows:
 <ol>
   <title xml:id="simulation_process">Simulation Process</title>
   <li> Create a list of random numbers </li>
   <li> Apply a function or functions to the list to answer whether the experiment
     is a success (return 1) or a failure (return 0)</li>
   <li> Once you can successfully run one trial of an experiment, run the experiment
     many times, recording the numbers of successes and failures to calculate the
   estimated probability</li>
  <li> To go above and beyond, estimate the probability many times to get a sense
    of how much each estimate varies from simulation to simulation</li>
 </ol>
</p>
<p> In the following examples, we will see this process in action and introduce
  some useful functions in Sage that can help us to simulate probabilities.
</p>
<example xml:id="example_sim_rolling_a_five">
<title>Probability of Rolling a Five</title>
<p>What is the probability of rolling a five on a six-sided dice? We know that the
answer is 1/6, but can we get the computer to arrive at this result? To do this,
we will roll a lot of virtual dice! Note, Sage counts from 0, so our "computer dice"
has numbers 0,1,2,3,4,5 instead of 1,2,3,4,5,6. We will correct for this by adding
one to each random number.</p>
<p>
Let's begin by rolling just once dice. The following code rolls one six-sided
"computer dice." It does this by defining a function called roll_d6(). This function,
when called, generates a number between zero and five via the randrange(5) command, then
adds one to get a number between one and six. The thrid line calls the function,
effectively rolling the "computer dice."  In the online version of the text,
execute the command below multiple times and see that the output can change.
</p>
<sage>
  <input>
def roll_d6():
     return randrange(6)+1
roll_d6()
   </input>
</sage>
<p>We can take this a step further. Why roll one dice when we can roll many at once?
  This is step one of the simulation process. The following notation gives a list
   (named rolls) of 100 six-sided dice rolls.</p>
<sage>
  <input>
def roll_d6():
     return randrange(6)+1
rolls=[roll_d6() for i in range(100)]
rolls
   </input>
</sage>
<p>
  Before we move on, see if you can modify the above code to roll 50 20-sided dice.
</p>
<p>
  So far, we have been able to roll many dice, but we still don't know the
  probability of rolling a five. We need a function that will tell us when we've rolled
  a five (success), and when we haven't (failure). This is step two of the simulation process.
  By assigning the value one to success
  and the value zero to failure, we can count the number of successes by adding up
  the numbers in the list! We define this function next. Test it to make sure it behaves
  as expected.
</p>
<sage>
  <input>
def is_five(x):
  if x==5:
    return 1
  else:
    return 0
   </input>
</sage>
<p>
  Now, we just need to apply the is_five() function to every element in our list,
  and add up the list to tell us the total number of successes. This is step three
  of the simulation process.
</p>
<sage>
  <input>
num_rolls=100
def is_five(x):
  if x==5:
    return 1
  else:
    return 0
def roll_d6():
     return randrange(6)+1
rolls=[roll_d6() for i in range(num_rolls)]
success_list=[is_five(roll) for roll in rolls]
total_successes=sum(success_list)
estimated_probability=total_successes/num_rolls
estimated_probability
   </input>
</sage>
<p>Awesome! We now have a way to estimate the probability of rolling a five on a six-sided
dice. Notice that we have a process that can be executed many times (try running the
cell above many times and see that the output changes). We could create a <em>function</em>
that executes the above process, and run that function many times (we'll do it 50 times)! This is step four
of the simulation process.</p>
<sage>
  <input>
def is_five(x):
  if x==5:
    return 1
  else:
    return 0
def roll_d6():
  return randrange(6)+1
def estimate_probability(num_rolls):
  rolls=[roll_d6() for i in range(num_rolls)]
  success_list=[is_five(roll) for roll in rolls]
  total_successes=sum(success_list)
  estimated_probability=total_successes/num_rolls
  return estimated_probability
estimate_list=[estimate_probability(100) for i in range(50)]
estimate_list
   </input>
</sage>
Finally, rather than looking at all the estimates as a list of numbers, we can
visualize the list of estimates with a histogram.
<sage>
  <input>
def is_five(x):
  if x==5:
    return 1
  else:
    return 0
def roll_d6():
  return randrange(6)+1
def estimate_probability(num_rolls):
  rolls=[roll_d6() for i in range(num_rolls)]
  success_list=[is_five(roll) for roll in rolls]
  total_successes=sum(success_list)
  estimated_probability=total_successes/num_rolls
  return estimated_probability
estimate_list=[estimate_probability(100) for i in range(50)]
histogram(estimate_list)
   </input>
</sage>
</example>
<example xml:id="example_sim_rolling_a_five_four_rolls">
<title>Probability of Rolling a Five in Four Rolls</title>
<p>
  What is the probability of rolling a five in four rolls of fair dice? We
will modify the code from <xref ref="example_sim_rolling_a_five"/> to arrive at
an approximation of the answer, all while following the simulation process.
</p>
<p>
Before we write code, let's think about what we ary trying to do. We want to
define "success" (return 1) to be that we roll a five in four rolls of fair dice.
While "failure" (return 0) is that we do not roll a five in four  rolls of fair dice.
</p>
<p>
The following code rolls four fair "computer dice." This is step one of the simulation process.
</p>
<sage>
  <input>
def roll_d6():
     return randrange(6)+1
rolls=[roll_d6() for i in range(4)]
rolls
   </input>
</sage>
<p>
  We can apply our indicator function is_five to each roll in this list. Then,
  the sum of the list can be either 0,1,2,3, or 4. If the sum is zero, that must mean
  there are no fives, which is a failure, while if the sum is positive, it means that at least one roll
  was a five, which is a success. We can write a function, is_positive(), to help
  us distinguish success from failure in this case. Run the code below to see
  the result of an experiment of rolling four dice, and seeing if at least one of
  the dice is a five. This is step two of the simulation process. Run it several times to see that sometimes the experiment "succeeds"
  and sometimes the experiment "fails."
</p>
<sage>
  <input>
def is_five(x):
  if x==5:
    return 1
  else:
    return 0
def is_positive(x):
    if x>0:
      return 1
    else:
      return 0
def roll_d6():
  return randrange(6)+1
rolls=[roll_d6() for i in range(4)]
five_list=[is_five(x) for x in rolls]
is_positive(sum(five_list))
   </input>
</sage>
<p>
Now, we move to step 3 of the simulation process. The following code let's us run
the experiment many times by making the process from the previous code block a
function in its own right, then running that function multiple times. The probability estimate
is then the number of successes divided by the number of experiments run.
</p>
<sage>
  <input>
def is_five(x):
  if x==5:
    return 1
  else:
    return 0
def is_positive(x):
    if x>0:
      return 1
    else:
      return 0
def roll_d6():
  return randrange(6)+1
def perform_experiment():
  rolls=[roll_d6() for i in range(4)]
  five_list=[is_five(x) for x in rolls]
  return is_positive(sum(five_list))
success_list=[perform_experiment() for i in range(100)]
total_successes=sum(success_list)
estimated_probability=total_successes/100
estimated_probability
   </input>
</sage>
</example>
</section>
